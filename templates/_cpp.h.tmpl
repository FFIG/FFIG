#include "{{class.name}}_c.h"
{% load c_filter %} {% load c_casts_filter %}
namespace CPP_API {

class {{class.name}}
{
  virtual ~{{class.name}}()
  {
    {{class.name}}_dispose(do_get_object());
  }
{% for function in class.functions %}  {{function.return_type|to_c}} {{function.name}}(const void* my{{class.name}}{% for arg in function.arguments %}, {{arg.type|to_c}} {{arg.name}}{% endfor %})
  {
    return {{class.name}}_{{function.name}}(do_get_object(){% if function.arguments %},{% endif %}{% for arg in function.arguments %}, {{arg.name}}{% endfor %});
  }
{%endfor%}
private:
  virtual void do_get_object() const = 0;
};
{% for impl in impl_classes %}
class {{impl.name}} : public {{class.name}}
{
public:
  {{impl.name}}() : object_({{class.name}}_{{impl.name}}_create({% for arg in function.arguments %}{% if not forloop.first %}, {% endif %}{{arg.name}}{% endfor %})) {}

private:
  const void* object_;
  void do_get_object() const override
  {
    return object_;
  }
};
{% endfor %}
} // end namespace CPP_API
