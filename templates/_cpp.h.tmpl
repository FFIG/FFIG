#include "{{class.name}}_c.h"
{% load c_filter %} {% load c_casts_filter %}
namespace CPP_API {

class {{class.name}}
{
  const void* object_;

  {{class.name}}(const {{class.name}}&) = delete;
  
  {{class.name}}& operator = (const {{class.name}}&) = delete;

protected:
  {{class.name}}(const void* o) : object_(o) {}

public:
  virtual ~{{class.name}}()
  {
    {{class.name}}_dispose(object_);
  }
{% for method in class.methods %}  
  {{method.return_type|to_c}} {{method.name}}({% for arg in method.arguments %}{%if not forloop.first %}, {% endif %}{{arg.type}} {{arg.name}}{% endfor %}) const
  {
    return {{class.name}}_{{method.name}}(object_{% for arg in method.arguments %}, {{arg.name|c_object:arg.type}}{% endfor %});
  } 
{%endfor%}
};
{% for impl in impl_classes %}
class {{impl.name}} : public {{class.name}}
{
public:
  {% for method in impl.constructors %}{{impl.name}}({% for arg in method.arguments %}{% if not forloop.first %}, {% endif %}{{arg.type}} {{arg.name}}{% endfor %}) : {{class.name}}({{class.name}}_{{impl.name}}_create({% for arg in method.arguments %}{% if not forloop.first %}, {% endif %}{{arg.name|c_object:arg.type}}{% endfor %})){}{% endfor %}
};
{% endfor %}
} // end namespace CPP_API
