#pragma once

#define {{class.name}}_RC_SUCCESS 0
#define {{class.name}}_RC_FAIL 1

// FIXME: Use something nicer than _MBCS to see if we are on VS
#ifdef _MBCS 
#ifdef {{class.name}}_c_EXPORTS
#define EXPORT extern "C" __declspec(dllexport)
#else
#define EXPORT extern "C" __declspec(dllimport)
#endif
#else
#define EXPORT extern "C" __attribute__((visibility("default")))
#endif

#ifdef __cplusplus
extern "C"
{
#endif
EXPORT void {{class.name}}_clear_error();
EXPORT const char* {{class.name}}_error();
EXPORT void {{ class.name }}_dispose(const void* my{{class.name}});
{% if not class.is_abstract %}{% for method in class.constructors %}
EXPORT int {{class.name}}_{{ class.name }}_create({% for arg in method.arguments %}{{arg.type|to_c}} {{arg.name}},{% endfor %} const void** rv); {% endfor %}{% endif %}
{% for method in class.methods %}
EXPORT int {{ class.name }}_{{method.name}}(const void* my{{class.name}}{% for arg in method.arguments %}, {{arg.type|to_c}} {{arg.name}}{% endfor %}, {{method.return_type|to_c}}* rv);
{% endfor %} {% for impl in impl_classes %} {% for method in impl.constructors %}
EXPORT int {{class.name}}_{{ impl.name }}_create({% for arg in method.arguments %}{{arg.type|to_c}} {{arg.name}},{% endfor %} const void** rv);
{% endfor %} {% endfor %}
#ifdef __cplusplus
}
#endif
