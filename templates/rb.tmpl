{% autoescape off %}{% load capi_filter %}require 'ffi'

module {{class.name}}_c
  extend FFI::Library
  ffi_lib '{{class.name}}_c'
  attach_function :{{class.name}}_dispose, [:pointer], :void
  attach_function :{{class.name}}_error, [], :string
  attach_function :{{class.name}}_clear_error, [], :void {% for method in class.methods %}
  attach_function :{{class.name}}_{{method.name}}, [:pointer{% for arg in method.arguments %}, {{arg.type|to_ruby_type}}{% endfor %}, :pointer], :int{% endfor %}
end

class ShapeError < Exception
  def initialize()
      msg = Shape_c.Shape_error
      Shape_c.Shape_clear_error()
      super(msg)
  end
end

class {{class.name}}
  def initialize(objptr)
    @ptr = objptr.get_pointer(0)
    ObjectSpace.define_finalizer( self, self.class.finalize(@ptr) )
  end

  def self.finalize(ptr)
    proc { {{class.name}}_c.{{class.name}}_dispose(ptr) }
  end
  {% for method in class.methods %}
  def {{method.name}}
    dptr = {{method.return_type|to_ruby_output_type}}
    rc = {{class.name}}_c.{{method.name}}(@ptr, dptr)
    if rc != 0
      raise ShapeError
    end
    dptr.{{method.return_type|restore_ruby_type}}
  end
{% endfor %}end
{% endautoescape %}
