#import "{{class.name}}_objc.h"
#import "{{class.name}}_c.h"

{% load objc_filter %}
@implementation {{class.name}}
{
  const void* obj_;
}

- (id)init
{
  self = [super init];
  if (self)
  {
    obj_ = nil;
  }
  return self;
}

- (id)initWithObj:(const void*)obj
{
  self = [super init];
  if (self)
  {
    obj_ = obj;
  }
  return self;
}

- (void)dealloc
{
  if (self && obj_) {{class.name}}_dispose(obj_);
  [super dealloc];
}

{% for function in class.functions %}
- ({{function.return_type|to_objc}}){{function.name}}{% if function.arguments %}:{% endif %}{%for arg in function.arguments %}({{arg.type|to_objc}}){{arg.name}}{% if not forloop.last %} {% endif %}{% endfor %}
{
  {{function.return_type}} t_value = {{class.name}}_{{function.name}}(obj_{% if function.arguments %}, {% endif %}{% for arg in function.arguments %}arg.name{% if not forloop.last %}, {% endif %}{% endfor %});
  return {{function.return_type|wrap_objc_type:"t_value"}};
}
{% endfor %}
@end

{% for impl in impl_classes %}
@implementation {{impl.name}}
{% for function in impl.constructors %} 
- (id)initWith{% for arg in function.arguments %}{{arg.name|title}}{% endfor %}:{%for arg in function.arguments %}({{arg.type|to_objc}}){{arg.name}}{% if not forloop.last %} {% endif %}{% endfor %}
{
  const void* obj = {{class.name}}_{{impl.name}}_create({% for arg in function.arguments %}{{arg.type|unwrap_objc_type:arg.name}}{% if not forloop.last %}, {% endif %}{% endfor %});
  self = [super initWithObj:obj];
  return self;
}
{% endfor %}
@end
{% endfor %}
