#include <new>
#include "{{class.name}}_c.h"
#include "{{class.name}}.h"
{% load capi_filter %}

void {{ class.name }}_dispose(const void* my{{class.name}})
{
  delete reinterpret_cast<const {{class.name}}*>(my{{class.name}});
}
{% for method in class.methods %}
{{method.return_type|to_c}} {{ class.name }}_{{method.name}}(const void* my{{class.name}}{% for arg in method.arguments %}, {{arg.type|to_c}} {{arg.name}}{% endfor %})
{
  return reinterpret_cast<const {{class.name}}*>(my{{class.name}})->{{method.name}}({% for arg in method.arguments %}{% if not forloop.first %}, {% endif %}{{arg.type|cast_c_type}}{{arg.name}}{% endfor %});
}
{% endfor %} {% for impl in impl_classes %} {% for method in impl.constructors %}
const void* {{class.name}}_{{ impl.name }}_create({% for arg in method.arguments %}{% if not forloop.first %}, {% endif %}{{arg.type|to_c}} {{arg.name}}{% endfor %})
{
  return new (std::nothrow) {{ impl.name }}({% for arg in method.arguments %}{% if not forloop.first %}, {% endif %}{{arg.type|cast_c_type}}{{arg.name}}{% endfor %});
}
{% endfor %} {% endfor %}
