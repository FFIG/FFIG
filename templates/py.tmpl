{% autoescape off %}{% load ctypes_filter %}from ctypes import *
c_object_p = POINTER(c_void_p)

class {{class.name}}:
  {% for function in class.functions %}
  def {{function.name}}(self{% for arg in function.arguments %}, {{arg.name}} {% endfor %}):
    return conf.lib.{{class.name}}_{{function.name}}(self{% for arg in function.arguments %}, {{arg.name}}{% endfor %})
    {% endfor %}
  def from_param(self):
    return self.ptr

  def __del__(self):
    conf.lib.{{class.name}}_dispose(self)

{% for impl in impl_classes %}class {{impl.name}}({{class.name}}): {% for function in impl.constructors %}
  def __init__(self{% for arg in function.arguments %}, {{arg.name}}{% endfor %}):
    self.ptr=conf.lib.{{class.name}}_{{ impl.name }}_create({% for arg in function.arguments %}{% if not forloop.first %}, {% endif %}{{arg.name}}{% endfor %})
{% endfor %} 
{% endfor %}

functionList = [

  ("{{class.name}}_dispose",
  [{{class.name}}],
  None),{% for impl in impl_classes %} {% for function in impl.constructors %}
  
  ("{{class.name}}_{{ impl.name }}_create",
  [{% for arg in function.arguments %}{% if not forloop.first %}, {% endif %}{{arg.type|to_ctype}}{% endfor %}],
  c_object_p),{% endfor %}{% endfor %} {% for function in class.functions %}
  
  ("{{ class.name }}_{{function.name}}",
  [{{class.name}}{% for arg in function.arguments %}, {{arg.type|to_ctype}} {% endfor %}],
  {{function.return_type|to_ctype}}){% if not forloop.last %},{% endif %}{% endfor %}
]

# library loading and function registrations
# based on clang python bindings approach

def register_function(lib, item):
  func = getattr(lib, item[0])

  if len(item) >= 2:
    func.argtypes = item[1]

  if len(item) >= 3:
    func.restype = item[2]


class CachedProperty(object):

    def __init__(self, wrapped):
        self.wrapped = wrapped
        try:
            self.__doc__ = wrapped.__doc__
        except:
            pass

    def __get__(self, instance, instance_type=None):
        if instance is None:
            return self

        value = self.wrapped(instance)
        setattr(instance, self.wrapped.__name__, value)

        return value

class Config:
    library_path = None
    loaded = False

    @staticmethod
    def set_library_path(path):
        if Config.loaded:
            raise Exception("library path is already set.")
        Config.library_path = path

    @CachedProperty
    def lib(self):
        lib = self._get_library()
        map(lambda x:register_function(lib,x), functionList)
        Config.loaded = True
        return lib

    def _get_filename(self):
        import platform
        name = platform.system()

        if name == 'Darwin':
            file = 'lib{{class.name}}_c.dylib'
        elif name == 'Windows':
            file = '{{class.name}}_c.dll'
        else:
            file = 'lib{{class.name}}_c.so'

        if Config.library_path:
            file = Config.library_path + '/' + file

        return file

    def _get_library(self):
        try:
            library = cdll.LoadLibrary(self._get_filename())
        except OSError as e:
            msg = str(e) + ". To provide a path to {{class.name}} dylib use Config.set_library_path()"
            raise Exception(msg)

        return library  

conf = Config()

{% endautoescape %}
