{% import 'java.macros' as java_macros %}
// This code was generated by FFIG <http://ffig.org>.
// Manual edits will be lost.
package org.ffig.{{module.name}}

import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.Pointer;
import com.sun.jna.ptr.PointerByReference;
import com.sun.jna.ptr.DoubleByReference;
import com.sun.jna.ptr.IntByReference;

interface {{module.name}}CLibrary extends Library
{
    {{module.name}}CLibrary INSTANCE = ({{module.name}}CLibrary)Native.loadLibrary(
        "lib{{module.name}}_c.dylib", {{module.name}}CLibrary.class);

    void {{module.name}}_clear_error();

    String {{module.name}}_error();

{% for class in classes %}
    int {{module.name}}_{{class.name}}_dispose(Pointer o);
{% if not class.is_abstract %}
{% for method in class.constructors %}
    
    int {{module.name}}_{{class.name}}_create({{java_macros.method_c_parameters(method, trailing_comma=True)}}PointerByReference o);
{% endfor %}
{% endif %}
{% for method in class.methods %}

    {% if not method.returns_void %}
    int {{module.name}}_{{class.name}}_{{method.name}}(Pointer o, {{java_macros.method_c_parameters(method, trailing_comma=True)}}{{method.return_type|to_java_output_param}} rv);
    {% else %}
    int {{module.name}}_{{class.name}}_{{method.name}}(Pointer o, {{java_macros.method_c_parameters(method)}});
    {% endif %}
{% endfor %}
{% for impl in class.impls %}
{% for method in impl.constructors %}

    int {{module.name}}_{{impl.name}}_create({{java_macros.method_c_parameters(method, trailing_comma=True)}}PointerByReference o);
{% endfor %}
{% endfor %}
{% endfor %}
}

class {{module.name}}Exception extends RuntimeException {
    public {{module.name}}Exception()
    {
        super({{module.name}}CLibrary.INSTANCE.{{module.name}}_error());
        {{module.name}}CLibrary.INSTANCE.{{module.name}}_clear_error();
    }
}

{% for class in classes -%}
public class {{class.name}} {
    private Pointer ptr = Pointer.NULL;

    // Pointer constructor needs to be package-access for factory methods.
    {{class.name}}(Pointer ptr)
    {
        this.ptr = ptr;
    }

    protected void finalize() {
        {{module.name}}CLibrary.INSTANCE.{{module.name}}_{{class.name}}_dispose(ptr);
    }
{% for method in class.methods %}

    {% if method.returns_void %}
    public void {{method.name}}({{java_macros.method_parameters(method)}}) {
      int rc = {{module.name}}CLibrary.INSTANCE.{{module.name}}_{{class.name}}_{{method.name}}(ptr, {{java_macros.method_arguments(method)}});
      if(rc != 0) {
        throw new {{module.name}}Exception();
      }
    }
    {% else %}
    public {{method.return_type|to_java_return_type}} {{method.name}}({{java_macros.method_parameters(method)}}) {
      {{method.return_type|to_java_output_value("rv")}};
      int rc = {{module.name}}CLibrary.INSTANCE.{{module.name}}_{{class.name}}_{{method.name}}(ptr, {{java_macros.method_arguments(method, trailing_comma=True)}}rv);
      if(rc != 0) {
        throw new {{module.name}}Exception();
      }
      {% if method.returns_nullable %}
      if(rv == Pointer.NULL) {
        return Pointer.NULL;
      }
      {% endif %}
      return {{method.return_type|to_java_return_value("rv")}};
    }
    {% endif %}
{% endfor %}
{% if class.impls %}

// Use static factory methods for sub-classes as Java does not allow multiple 
// public classes in a file.
{% endif %}
{% for impl in class.impls %}
{% for method in impl.constructors %}

    public static {{class.name}} {{class.name}}_{{impl.name}}_create({{java_macros.method_parameters(method)}}) {
        PointerByReference rv = new PointerByReference();
        int rc = {{module.name}}CLibrary.INSTANCE.{{module.name}}_{{impl.name}}_create({{java_macros.method_arguments(method, trailing_comma=True)}}rv);
        if(rc != 0) {
            throw new {{module.name}}Exception();
        }
        return new {{class.name}}(rv.getValue());
    }
{% endfor %}
{% endfor %}
}
{% endfor %}
