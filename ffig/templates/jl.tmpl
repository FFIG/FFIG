{% import 'jl.macros' as julia_macros %}
# This code was generated by FFIG <http://ffig.org>.
# Manual edits will be lost.
module FFIG

{% for class in classes %} export {{class.name}}
{% for method in class.methods %} export {{method.name}}
{% endfor %}
{% for impl in class.impls %} export {{impl.name}}
{% endfor %}
{% endfor %}

struct {{module.name}}Exception <: Exception
  message::String
  function {{module.name}}Exception()
    m=ccall(("{{module.name}}_error", :lib_{{module.name}}_c),
            Cstring, ())
    new(unsafe_string(m))
    ccall(("{{module.name}}_clear_error", :lib_{{module.name}}_c),
            Void, ())
  end
end

{% for class in classes %}
abstract type {{class.name}} end
{% for method in class.methods %}

{% if method.is_noexcept %}
function {{method.name}}(o::{{class.name}})
  rv = ccall(("{{module.name}}_{{class.name}}_{{method.name}}_noexcept", :lib{{module.name}}_c),
             {{method.return_type|to_julia_return_type}}, (Ptr{Void},),
             o.ptr)
  return {{method.return_type|to_julia_return_value("rv")}}

end
{% else %}
function {{method.name}}(o::{{class.name}})
  rv = Array{% raw %}{{% endraw %}{{method.return_type}}{% raw %}}{% endraw %}(1)
  rc = ccall(("{{module.name}}_{{class.name}}_{{method.name}}", :lib{{module.name}}_c),
              Int32, (Ptr{Void}, Ptr{% raw %}{{% endraw %}{{method.return_type|to_julia_return_type}}{% raw %}}{% endraw %}),
              o.ptr, rv)
  if rc != 0
    throw {{module.name}}Exception()
  endif
  return {{method.return_type|to_julia_return_value("rv[1]")}}
end
{% endif %}
{% endfor %}
{% for impl in class.impls %}

struct {{impl.name}} <: {{class.name}}
{% for method in impl.constructors %}
  ptr::Ptr{Void}
  function {{impl.name}}(r::Float64)
    p = Array{Ptr{Void}}(1)
    (r, p)
    ccall(("{{module.name}}_{{impl.name}}_create", :lib{{module.name}}_c),
           Int32, ({{julia_macros.method_parameter_types(method, trailing_comma=True)}} Ptr{Void}), r, p)
    new(p[1])
  end
{% endfor %}
end
{% endfor %}
{% endfor %}

end # module FFIG
