{% import 'jl.macros' as julia_macros %}
# This code was generated by FFIG <http://ffig.org>.
# Manual edits will be lost.
module FFIG

struct {{module.name}}Exception <: Exception 
  message::String
  #{{module.name}}Exception = (s=unsafe_string(ccall(("{{module.name}}_error", :lib_{{module.name}}_c), Cstring, ())); new(s))
end

{% for class in classes %}
struct {{class.name}}
  ptr::Ptr{Void}
  {{class.name}}(ptr) = new(ptr)
  {% if not class.is_abstract %}
  {% endif %}
end
{% for method in class.methods %}

{% if method.is_noexcept %}
function {{method.name}}(o::{{class.name}})
  return ccall(("{{module.name}}_{{class.name}}_{{method.name}}_noexcept", :lib{{module.name}}_c), 
                {{method.return_type|to_julia_return_type}}, (Ptr{Void},), 
                s.ptr)
end
{% else %}
function {{method.name}}(o::{{class.name}})
  rv = Array{% raw %}{{% endraw %}{{method.return_type}}{% raw %}}{% endraw %}(1)
  rc = ccall(("{{module.name}}_{{class.name}}_{{method.name}}", :lib{{module.name}}_c), 
              Int32, (Ptr{Void}, Ptr{% raw %}{{% endraw %}{{method.return_type|to_julia_return_type}}{% raw %}}{% endraw %}), 
              s.ptr, rv)
  if rc != 0
    throw {{module.name}}Exception()  
  endif
  return rv[1]
end
{% endif %}
{% endfor %}
{% for impl in class.impls %}

struct {{impl.name}} <: {{class.name}} 
{% for constructor in impl.constructors %}
  {{impl.name}}() = new()
{% endfor %}
end
{% endfor %}
{% endfor %}

end # module FFIG
