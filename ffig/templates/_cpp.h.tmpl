// This code was generated by FFIG <http://ffig.org>.
// Manual edits will be lost.

#include <exception>
#include <string>
#include "{{module.name}}_c.h"
namespace CPP_API {


class {{class.name}}
{
protected:
  {{module.name}}_{{class.name}} object_ = nullptr;
  {{class.name}}() = default;

public:
  {% if not class.is_abstract %}{% for method in class.constructors %}
  {{class.name}}({% for arg in method.arguments %}{% if not loop.first %}, {% endif %}{{arg.type}} {{arg.name}}{% endfor %})
  {
    int rc = {{module.name}}_{{class.name}}_create({% for arg in method.arguments %}{% if not loop.first %}, {% endif %}{{arg.name|c_object(arg.type)}}{% endfor %}, &object_);
    if ( rc == {{module.name}}_RC_SUCCESS ) return;
    throw exception();
  }{% endfor %}{% endif %}
  {{class.name}}(const {{class.name}}&) = delete;
  {{class.name}}& operator = (const {{class.name}}&) = delete;
  {{class.name}}({{class.name}}&& c)
  {
    object_ = c.object_;
    c.object_ = nullptr;
  }

  {{class.name}}& operator = ({{class.name}}&& c)
  {
    if(object_) {{module.name}}_{{class.name}}_dispose(object_);
    object_ = c.object_;
    c.object_ = nullptr;
    return *this;
  }
  
  class exception : public std::runtime_error
  {
  public:
    exception() : std::runtime_error({{module.name}}_error())
    {
      {{module.name}}_clear_error();
    }
  };

  virtual ~{{class.name}}()
  {
    {{module.name}}_{{class.name}}_dispose(object_);
  }
{% for method in class.methods %}
  {{method.return_type|to_cpp_type}} {{method.name}}({% for arg in method.arguments %}{%if not loop.first %}, {% endif %}{{arg.type}} {{arg.name}}{% endfor %}) const
  {
    {% if method.returns_void %} int rc = {{module.name}}_{{class.name}}_{{method.name}}(object_{% for arg in method.arguments %}, {{arg.name|c_object(arg.type)}}{% endfor %});
    {% else %}{{method.return_type|to_cpp_type}} rv;
    {% if not method.returns_sub_object %}int rc = {{module.name}}_{{class.name}}_{{method.name}}(object_{% for arg in method.arguments %}, {{arg.name|c_object(arg.type)}}{% endfor %}, &rv);
    {% else %}int rc = {{module.name}}_{{class.name}}_{{method.name}}(object_{% for arg in method.arguments %}, {{arg.name|c_object(arg.type)}}{% endfor %}, &rv.object_);{% endif %}
    {% endif %}if (rc == {{module.name}}_RC_SUCCESS) return{% if not method.returns_void %} rv{% endif %};
    throw exception();
  }
{%endfor%}
};
{% for impl in impl_classes %}
class {{impl.name}} : public {{class.name}}
{
public:
  {% for method in impl.constructors %}{{impl.name}}({% for arg in method.arguments %}{% if not loop.first %}, {% endif %}{{arg.type}} {{arg.name}}{% endfor %})
  {
    int rc = {{module.name}}_{{impl.name}}_create({% for arg in method.arguments %}{% if not loop.first %}, {% endif %}{{arg.name|c_object(arg.type)}}{% endfor %}, &object_);
    if ( rc == {{module.name}}_RC_SUCCESS ) return;
    throw exception();
  }{% endfor %}
};
{% endfor %}
} // end namespace CPP_API
