# library loading and method registrations
# based on clang python bindings approach


def register_method(lib, item):
    func = getattr(lib, item[0])

    if len(item) >= 2:
        func.argtypes = item[1]

    if len(item) >= 3:
        func.restype = item[2]

    if len(item) == 4:
        func.errcheck = item[3]


class CachedProperty(object):

    def __init__(self, wrapped):
        self.wrapped = wrapped
        try:
            self.__doc__ = wrapped.__doc__
        except Exception:
            pass

    def __get__(self, instance, instance_type=None):
        if instance is None:
            return self

        value = self.wrapped(instance)
        setattr(instance, self.wrapped.__name__, value)

        return value


class Config:
    _library_path = None
    _loaded = False

    @property
    def library_path(self):
        return type(self)._library_path

    @library_path.setter
    def library_path(self, path):
        if type(self)._loaded:
            raise Exception("library path is already set.")
        type(self).library_path = path

    @CachedProperty
    def lib(self):
        lib = self._get_library()
        for m in methodList:
            register_method(lib, m)
        Config._loaded = True
        return lib

    def _get_filename(self):
        import platform
        name = platform.system()

        if name == 'Darwin':
            file = 'lib{{module.name}}_c.dylib'
        elif name == 'Windows':
            file = '{{module.name}}_c.dll'
        else:
            file = 'lib{{module.name}}_c.so'
        return file

    def _get_filepath(self):
        filename = self._get_filename()
        if not Config._library_path:
            return filename
        return os.path.join(Config._library_path, filename)

    def _get_library(self):
        try:
            # Use user-specified library path.
            if Config._library_path:
                library = cdll.LoadLibrary(self._get_filepath())
            else:
                # Use local file
                try:
                    lib_file_dir = os.path.abspath(
                        os.path.dirname(os.path.dirname(__file__)))
                    library = cdll.LoadLibrary(
                        os.path.join(lib_file_dir, self._get_filename()))
                except Exception:
                    # Use system library path (last).
                    library = cdll.LoadLibrary(self._get_filename())
        except OSError as e:
            msg = str(e) + ". To provide a path to {} set the property Config.library_path".format(self._get_filename())
            raise Exception(msg)

        return library


conf = Config()

