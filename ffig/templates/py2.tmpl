{% import 'py2.macros' as py2_macros %}
# This code was generated by FFIG <http://ffig.org>.
# Manual edits will be lost.

import os
from ctypes import *
c_object_p = POINTER(c_void_p)


class {{module.name}}_error(Exception):

    def __init__(self):
        self.value = conf.lib.{{module.name}}_error()
        conf.lib.{{module.name}}_clear_error()

    def __str__(self):
        return self.value
{% for class in classes %}


class {{class.name}}:
{% if not class.is_abstract %}

    @classmethod
    def from_capi(cls, ptr):
        assert(isinstance(ptr, c_object_p))
        if not bool(ptr):
            return None
        return cls(_p=ptr)
    {% for method in class.constructors %}

    def __init__(self, {{py2_macros.constructor_parameters(method, trailing_comma=True)}}_p=None):
        if _p:
            self.ptr = _p
        else:
            self.ptr = c_object_p()
            rc = conf.lib.{{module.name}}_{{ class.name }}_create({{py2_macros.method_arguments(method, trailing_comma=True)}}byref(self.ptr))
            if rc != 0:
                raise {{module.name}}_error()
    {% endfor %}
{% endif %}
{% for method in class.methods %}

    {% if method.is_property %}
    @property
    {% endif %}
    def {{method.name}}(self{{py2_macros.method_parameters(method, leading_comma=True)}}):
    {% if method.returns_void %}
        rc = conf.lib.{{module.name}}_{{class.name}}_{{method.name}}(self{{py2_macros.method_arguments(method, leading_comma=True)}})
        if rc != 0:
            raise {{module.name}}_error()
    {% elif not method.returns_sub_object %}
        rv = {{method.return_type|to_output_py2_ctype}}()
        rc = conf.lib.{{module.name}}_{{class.name}}_{{method.name}}(self{{py2_macros.method_arguments(method, leading_comma=True)}}, byref(rv))
        if rc == 0:
            return rv.value
        raise {{module.name}}_error()
    {% else %}
        rv = c_object_p()
        rc = conf.lib.{{module.name}}_{{class.name}}_{{method.name}}(self{{py2_macros.method_arguments(method, leading_comma=True)}}, byref(rv))
        if rc == 0:
            return {{method.return_type|to_py2_ctype}}.from_capi(rv)
        raise {{module.name}}_error()
    {% endif %}
{% endfor %}

    @classmethod
    def from_param(k, x):
        assert isinstance(x, k)
        return x.ptr

    def __del__(self):
        conf.lib.{{module.name}}_{{class.name}}_dispose(self)
{% for impl in class.impls %}


class {{impl.name}}({{class.name}}):

    @classmethod
    def from_capi(cls, ptr):
        assert(isinstance(ptr, c_object_p))
        if not bool(ptr):
            return None
        return cls(_p=ptr)
    {% for method in impl.constructors %}

    def __init__(self, {{py2_macros.constructor_parameters(method, trailing_comma=True)}}_p=None):
        if _p:
            self.ptr = _p
        else:
            self.ptr = c_object_p()
            rc = conf.lib.{{module.name}}_{{ impl.name }}_create({{py2_macros.method_arguments(method, trailing_comma=True)}}byref(self.ptr))
            if rc != 0:
                raise {{module.name}}_error()
    {% endfor %}
{% endfor %}
{% endfor %}


methodList = [
    ("{{module.name}}_error",
        [],
        c_char_p),
    ("{{module.name}}_clear_error",
        [],
        None),
{% for class in classes %}
    ("{{module.name}}_{{class.name}}_dispose",
        [{{class.name}}],
        None),
{% if not class.is_abstract %}
{% for method in class.constructors %}
    ("{{module.name}}_{{class.name}}_create",
        [{{py2_macros.method_argument_types(method, trailing_comma=True)}}POINTER(c_object_p)],
        c_int),
{% endfor %}
{% endif %}
{% for impl in class.impls %}
{% for method in impl.constructors %}
    ("{{module.name}}_{{ impl.name }}_create",
        [{{py2_macros.method_argument_types(method, trailing_comma=True)}}POINTER(c_object_p)],
        c_int),
{% endfor %}
{% endfor %}
{% for method in class.methods %}
    ("{{module.name}}_{{ class.name }}_{{method.name}}",
        [{{class.name}}{{py2_macros.method_argument_types(method, leading_comma=True)}}{% if not method.returns_void %}, POINTER({{method.return_type|to_output_py2_ctype}}){% endif %}],
        c_int),
{% endfor %}
{% endfor %}
]

{% include 'config.py.tmpl' %}

