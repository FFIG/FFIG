{
  "name": "FFIG",
  "tagline": "Generate code to call C++ from other languages",
  "body": "# Description\r\n\r\nFFIG is a Foreign Function Interface Generator.\r\n\r\nThis project uses libclang to read existing C++ class definitions and create\r\nequivalent classes in other languages (primarily Python for now) and binds them\r\nto the C++ implementation.\r\n\r\nWhile similar to SWIG, <http://www.swig.org>, FFIG does not need an interface\r\ngeneration language to be used nor do the bindings it generates depend on any\r\nbinary details of an interpreter. FFIG Python bindings will run on PyPy,\r\nPython2 Python3 without requiring changes.\r\n\r\nFFIG is in early development. We welcome feedback from users but would\r\nencourage anyone looking to generate language bindings to look at SWIG.\r\n\r\n# Setup (Docker)\r\n\r\nTo run an interactive demo using Jupyter Notebook and Docker:\r\n\r\n`docker run -d -p 8888:8888 jbcoe/c-api`\r\n\r\nNavigate to <http://localhost:8888> in a browser.\r\n\r\n\r\n# Setup (Linux and macOS)\r\n\r\nYou will need libclang 3.8 and clang python bindings.\r\n\r\nlibclang can be installed from homebrew on mac or here: <http://llvm.org/releases/>\r\n\r\nYou can use pip to install python bindings for libclang:\r\n\r\n`pip install clang version==3.8`\r\n\r\nSet `LD_LIBRARY_PATH` so that libclang can be found.\r\n\r\nUpdate submodules with `git submodule update --init --recursive`.\r\n\r\n\r\n# Setup (Windows)\r\n\r\nUntested, minor issues expected.\r\n\r\n\r\n# Using the API generator\r\n\r\nCurrently little more than an extensible proof of concept, the method for running API generation is due revision.\r\n\r\nFor now:\r\n\r\nAdd code to the 'input' directory in a similar vein to the existing 'Shape.h' class and run:\r\n    \r\n`./run_tests.sh`\r\n\r\nthis populates 'output' with generated files and runs the simple existing tests.\r\n\r\nAdding django templates to the 'templates' directory in a similar vein to the\r\nexisting templates will generate extra output files.\r\n\r\nNew input files and templates are picked up automatically.\r\n\r\n\r\n# Output\r\n\r\nThe 'output' directory is populated with C++, C and Python bindings files along with a dynamic library.\r\n\r\nSetting `LD_LIBRARY_PATH` so that the C-API bindings shared libraries in `output` can be found and\r\nrunning the following in `ipython` will exercise the generated python bindings.\r\n\r\n    from YOUR_BASE_CLASS_NAME import *\r\n\r\n    x = DERIVED_CLASS_NAME(CONSTRUCTOR_ARGUMENTS)\r\n    x.MEMBER_FUNCTION_1(MEMBER_FUNCTION_ARGUMENTS_1)\r\n    x.MEMBER_FUNCTION_2(MEMBER_FUNCTION_ARGUMENTS_2)\r\n\r\n\r\n#Continuous integration\r\n\r\n**Build status (on Travis-CI):** [![Build Status](https://travis-ci.org/jbcoe/ffig.svg?branch=master)](https://travis-ci.org/jbcoe/ffig)\r\n\r\n\r\n# Issues\r\n\r\nPlease raise github issues if code cannot be generated where expected or if generated code does not behave as expected.\r\n\r\n\r\n# Contributing\r\n\r\nContributions are very welcome, please look at unassigned github issues or raise issues for suggested improvements.\r\n\r\n\r\n# Attribution\r\n\r\nI've made considerable use of the following in putting this together:\r\n\r\n* <http://szelei.me/code-generator>\r\n* <http://blog.glehmann.net/2014/12/29/Playing-with-libclang>\r\n* <http://eli.thegreenplace.net/tag/llvm-clang>\r\n\r\nDesign of the python bindings is taken from clang's cindex.\r\n\r\n* <https://github.com/llvm-mirror/clang/tree/master/bindings/python>\r\n\r\nMistakes are my own.\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}