// This code was generated by FFIG <http://ffig.org>.
// Manual edits will be lost.
using System;
using System.Runtime.InteropServices;

namespace Shape_c {

  public class Exception : System.Exception {

    [DllImport("Shape_c")]
    private static extern void Shape_clear_error();

    [DllImport("Shape_c")]
    private static extern IntPtr Shape_error();

    public Exception() : base(Marshal.PtrToStringAnsi(Shape_error())) {
      Shape_clear_error();
    }
  }

  public class AbstractShape {

    [DllImport("Shape_c")]
    private static extern int Shape_AbstractShape_dispose(IntPtr c_obj);
    [DllImport("Shape_c")]
    private static extern double Shape_AbstractShape_area_noexcept(IntPtr c_obj);
    [DllImport("Shape_c")]
    private static extern double Shape_AbstractShape_perimeter_noexcept(IntPtr c_obj);
    [DllImport("Shape_c")]
    private static extern IntPtr Shape_AbstractShape_name_noexcept(IntPtr c_obj);
    [DllImport("Shape_c")]
    private static extern int Shape_AbstractShape_is_equal_noexcept(IntPtr c_obj, IntPtr s);

    protected IntPtr c_obj_;

    protected AbstractShape() {
    }

    protected AbstractShape(IntPtr c_obj) {
      c_obj_ = c_obj;
    }

    ~AbstractShape() {
      Shape_AbstractShape_dispose(c_obj_);
    }
    public double area {
      get {
        var rv = Shape_AbstractShape_area_noexcept(c_obj_);
        return rv;
      }
    }
    public double perimeter {
      get {
        var rv = Shape_AbstractShape_perimeter_noexcept(c_obj_);
        return rv;
      }
    }
    public string name {
      get {
        var rv = Shape_AbstractShape_name_noexcept(c_obj_);
        return Marshal.PtrToStringAnsi(rv);
      }
    }
    public int is_equal(AbstractShape s) {
      var rv = Shape_AbstractShape_is_equal_noexcept(c_obj_, s.c_obj_);
      return rv;
    }
  }

  public class Circle : Shape_c.AbstractShape {

    [DllImport("Shape_c")]
    private static extern int Shape_Circle_create(double radius, out IntPtr ptr);

    public Circle(double radius) {
      int rc = Shape_Circle_create(radius, out c_obj_);
      if(rc != 0) {
        throw new Shape_c.Exception();
      }
    }
  }

  public class Square : Shape_c.AbstractShape {

    [DllImport("Shape_c")]
    private static extern int Shape_Square_create(double side, out IntPtr ptr);

    public Square(double side) {
      int rc = Shape_Square_create(side, out c_obj_);
      if(rc != 0) {
        throw new Shape_c.Exception();
      }
    }
  }

  public class Pentagon : Shape_c.AbstractShape {

    [DllImport("Shape_c")]
    private static extern int Shape_Pentagon_create(double side, out IntPtr ptr);

    public Pentagon(double side) {
      int rc = Shape_Pentagon_create(side, out c_obj_);
      if(rc != 0) {
        throw new Shape_c.Exception();
      }
    }
  }

}
