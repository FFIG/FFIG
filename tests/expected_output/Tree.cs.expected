// This code was generated by FFIG <http://ffig.org>.
// Manual edits will be lost.
using System;
using System.Runtime.InteropServices;

namespace Tree_c {

  public class Exception : System.Exception {

    [DllImport("Tree_c")]
    private static extern void Tree_clear_error();

    [DllImport("Tree_c")]
    private static extern IntPtr Tree_error();

    public Exception() : base(Marshal.PtrToStringAnsi(Tree_error())) {
      Tree_clear_error();
    }
  }

  public class Tree {

    [DllImport("Tree_c")]
    private static extern int Tree_Tree_dispose(IntPtr c_obj);

    [DllImport("Tree_c")]
    private static extern int Tree_Tree_create(int levels, out IntPtr ptr);
    [DllImport("Tree_c")]
    private static extern IntPtr Tree_Tree_left_subtree_noexcept(IntPtr c_obj);
    [DllImport("Tree_c")]
    private static extern IntPtr Tree_Tree_right_subtree_noexcept(IntPtr c_obj);
    [DllImport("Tree_c")]
    private static extern int Tree_Tree_data_noexcept(IntPtr c_obj);
    [DllImport("Tree_c")]
    private static extern void Tree_Tree_set_data_noexcept(IntPtr c_obj, int x);

    protected IntPtr c_obj_;

    public Tree(int levels) {
      int rc = Tree_Tree_create(levels, out c_obj_);
      if(rc != 0) {
        throw new Tree_c.Exception();
      }
    }

    protected Tree() {
    }

    protected Tree(IntPtr c_obj) {
      c_obj_ = c_obj;
    }

    ~Tree() {
      Tree_Tree_dispose(c_obj_);
    }
    public Tree left_subtree() {
      var rv = Tree_Tree_left_subtree_noexcept(c_obj_);
      if(rv == IntPtr.Zero) {
        return null;
      }
      return new Tree(rv);
    }
    public Tree right_subtree() {
      var rv = Tree_Tree_right_subtree_noexcept(c_obj_);
      if(rv == IntPtr.Zero) {
        return null;
      }
      return new Tree(rv);
    }
    public int data() {
      var rv = Tree_Tree_data_noexcept(c_obj_);
      return rv;
    }
    public void set_data(int x) {
      Tree_Tree_set_data_noexcept(c_obj_, x);
    }
  }

}
