// This code was generated by FFIG <http://ffig.org>.
// Manual edits will be lost.
package org.ffig.Shape

import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.Pointer;
import com.sun.jna.ptr.PointerByReference;
import com.sun.jna.ptr.DoubleByReference;
import com.sun.jna.ptr.IntByReference;

interface ShapeCLibrary extends Library
{
    ShapeCLibrary INSTANCE = (ShapeCLibrary)Native.loadLibrary(
        "libShape_c.dylib", ShapeCLibrary.class);

    void Shape_clear_error();

    String Shape_error();

    int Shape_AbstractShape_dispose(Pointer o);

    int Shape_AbstractShape_area(Pointer o, DoubleByReference rv);

    int Shape_AbstractShape_perimeter(Pointer o, DoubleByReference rv);

    int Shape_AbstractShape_name(Pointer o, PointerByReference rv);

    int Shape_AbstractShape_is_equal(Pointer o, Pointer s, IntByReference rv);

    int Shape_Circle_create(double radius, PointerByReference o);

    int Shape_Square_create(double side, PointerByReference o);

    int Shape_Pentagon_create(double side, PointerByReference o);
}

class ShapeException extends RuntimeException {
    public ShapeException()
    {
        super(ShapeCLibrary.INSTANCE.Shape_error());
        ShapeCLibrary.INSTANCE.Shape_clear_error();
    }
}

public class AbstractShape {
    private Pointer ptr = Pointer.NULL;

    // Pointer constructor needs to be package-access for factory methods.
    AbstractShape(Pointer ptr)
    {
        this.ptr = ptr;
    }

    protected void finalize() {
        ShapeCLibrary.INSTANCE.Shape_AbstractShape_dispose(ptr);
    }

    public double area() {
      DoubleByReference rv = new DoubleByReference();;
      int rc = ShapeCLibrary.INSTANCE.Shape_AbstractShape_area(ptr, rv);
      if(rc != 0) {
        throw new ShapeException();
      }
      return rv.getValue();
    }

    public double perimeter() {
      DoubleByReference rv = new DoubleByReference();;
      int rc = ShapeCLibrary.INSTANCE.Shape_AbstractShape_perimeter(ptr, rv);
      if(rc != 0) {
        throw new ShapeException();
      }
      return rv.getValue();
    }

    public String name() {
      PointerByReference rv = new PointerByReference();;
      int rc = ShapeCLibrary.INSTANCE.Shape_AbstractShape_name(ptr, rv);
      if(rc != 0) {
        throw new ShapeException();
      }
      return rv.getValue().getString(0);
    }

    public int is_equal(AbstractShape s) {
      IntByReference rv = new IntByReference();;
      int rc = ShapeCLibrary.INSTANCE.Shape_AbstractShape_is_equal(ptr, s.ptr, rv);
      if(rc != 0) {
        throw new ShapeException();
      }
      return rv.getValue();
    }

// Use static factory methods for sub-classes as Java does not allow multiple 
// public classes in a file.

    public static AbstractShape AbstractShape_Circle_create(double radius) {
        PointerByReference rv = new PointerByReference();
        int rc = ShapeCLibrary.INSTANCE.Shape_Circle_create(radius, rv);
        if(rc != 0) {
            throw new ShapeException();
        }
        return new AbstractShape(rv.getValue());
    }

    public static AbstractShape AbstractShape_Square_create(double side) {
        PointerByReference rv = new PointerByReference();
        int rc = ShapeCLibrary.INSTANCE.Shape_Square_create(side, rv);
        if(rc != 0) {
            throw new ShapeException();
        }
        return new AbstractShape(rv.getValue());
    }

    public static AbstractShape AbstractShape_Pentagon_create(double side) {
        PointerByReference rv = new PointerByReference();
        int rc = ShapeCLibrary.INSTANCE.Shape_Pentagon_create(side, rv);
        if(rc != 0) {
            throw new ShapeException();
        }
        return new AbstractShape(rv.getValue());
    }
}
