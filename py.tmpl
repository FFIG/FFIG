{% autoescape off %}
{% load ctypes_filter %}

from ctypes import *
c_object_p = POINTER(c_void_p)

lib = cdll.LoadLibrary("{{class.name}}.dylib")

class {{class.name}}:

  def __del__(self):
    lib.{{class.name}}_dispose(self)
  {% for function in class.functions %}
  def {{function.name}}(self {% for arg in function.arguments %}, {{arg.name}} {% endfor %}):
    return lib.{{class.name}}_{{function.name}}(self{% for arg in function.arguments %}, {{arg.name}}{% endfor %})
    {% endfor %}

  def from_param(self):
      return self.ptr

{% for impl in impl_classes %}class {{impl.name}}({{class.name}}): {% for function in impl.constructors %}
  def __init__(self{% for arg in function.arguments %}, {{arg.name}}{% endfor %}):
    self.ptr = lib.{{class.name}}_{{ impl.name }}_create({% for arg in function.arguments %}{% if not forloop.first %}, {% endif %}{{arg.name}}{% endfor %})

{% endfor %} 
{% endfor %}

functionList = [

  ("{{class.name}}_dispose",
  [{{class.name}}],
  None),{% for impl in impl_classes %} {% for function in impl.constructors %}
  
  ("{{class.name}}_{{ impl.name }}_create",
  [{% for arg in function.arguments %}{% if not forloop.first %}, {% endif %}{{arg.type|to_ctype}}{% endfor %}],
  c_object_p),{% endfor %}{% endfor %} {% for function in class.functions %}
  
  ("{{ class.name }}_{{function.name}}",
  [{{class.name}}{% for arg in function.arguments %}{% if not forloop.last %}, {% endif %}{{arg.type|to_ctype}} {% endfor %}],
  {{function.return_type|to_ctype}}){% if not forloop.last %},{% endif %}{% endfor %}
]

def register_function(item):
  func = getattr(lib, item[0])

  if len(item) >= 2:
    func.argtypes = item[1]

  if len(item) >= 3:
    func.restype = item[2]

map(register_function, functionList)

{% endautoescape %}
