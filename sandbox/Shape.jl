# This code was generated by FFIG <http://ffig.org>.
# Manual edits will be lost.
module FFIG

export Square, Circle, Pentagon, area, name, perimeter, is_equal

struct ShapeException <: Exception 
  message::String
  #ShapeException = (s=unsafe_string(ccall(("Shape_error", :lib_Shape_c), Cstring, ())); new(s))
end

abstract type AbstractShape end

function area(o::AbstractShape)
  return ccall(("Shape_AbstractShape_area_noexcept", :libShape_c), 
                Float64, (Ptr{Void},), 
                o.ptr)
end

function perimeter(o::AbstractShape)
  return ccall(("Shape_AbstractShape_perimeter_noexcept", :libShape_c), 
                Float64, (Ptr{Void},), 
                o.ptr)
end

function name(o::AbstractShape)
  return unsafe_string(ccall(("Shape_AbstractShape_name_noexcept", :libShape_c), 
                Cstring, (Ptr{Void},), 
                o.ptr))
end

function is_equal(o::AbstractShape)
  return ccall(("Shape_AbstractShape_is_equal_noexcept", :libShape_c), 
                Int32, (Ptr{Void},), 
                o.ptr)
end

struct Circle <: AbstractShape 
  ptr::Ptr{Void}
  function Circle(r::Float64)
    p = Array{Ptr{Void}}(1)
    ccall(("Shape_Circle_create", :libShape_c), Int32, (Float64, Ptr{Void}), r, p)
    new(p[1])
  end
end

struct Square <: AbstractShape 
  ptr::Ptr{Void}
  function Square(r::Float64)
    p = Array{Ptr{Void}}(1)
    ccall(("Shape_Square_create", :libShape_c), Int32, (Float64, Ptr{Void}), r, p)
    new(p[1])
  end
end

struct Pentagon <: AbstractShape 
  ptr::Ptr{Void}
  function Pentagon(r::Float64)
    p = Array{Ptr{Void}}(1)
    Shape_Pentagon_create(r, p)
    ccall(("Shape_Pentagon_create", :libShape_c), Int32, (Float64, Ptr{Void}), r, p)
    new(p[1])
  end
end

end # module FFIG
